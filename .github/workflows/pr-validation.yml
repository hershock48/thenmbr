name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Quick validation for PRs
  pr-checks:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type checking
        run: pnpm run type-check

      - name: ESLint
        run: pnpm run lint

      - name: Prettier check
        run: pnpm run format:check

      - name: Security audit
        run: pnpm run security:check

      - name: Build application
        run: pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Run unit tests
        run: pnpm run test:unit
        env:
          NODE_ENV: test

      - name: Comment PR with test results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test results if they exist
            let testResults = '';
            try {
              const coveragePath = path.join(process.cwd(), 'coverage', 'lcov-report', 'index.html');
              if (fs.existsSync(coveragePath)) {
                testResults = '‚úÖ Unit tests passed with coverage report available';
              } else {
                testResults = '‚úÖ Unit tests passed';
              }
            } catch (error) {
              testResults = '‚ùå Unit tests failed or no results found';
            }
            
            // Create PR comment
            const comment = `## üöÄ Pull Request Validation Results
            
            ### Code Quality
            - TypeScript: ‚úÖ Passed
            - ESLint: ‚úÖ Passed  
            - Prettier: ‚úÖ Passed
            - Security Audit: ‚úÖ Passed
            - Build: ‚úÖ Passed
            
            ### Tests
            - Unit Tests: ${testResults}
            
            ### Next Steps
            - [ ] Review code changes
            - [ ] Run integration tests locally if needed
            - [ ] Merge when ready
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
